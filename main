'''
CCT211 GUI Project

By: Samantha Margarejo, Jamie Chen, Pavandeep Pabla

Notes: Decided to not do a login as it was not required

Websites:

For drop down 
https://www.geeksforgeeks.org/combobox-widget-in-tkinter-python/
For matplot lib 
https://matplotlib.org/3.1.1/gallery/user_interfaces/embedding_in_tk_sgskip.html

For curse selection from auto filling entry
https://www.geeksforgeeks.org/how-to-get-selected-value-from-listbox-in-tkinter/
https://www.tutorialspoint.com/how-to-clear-the-entry-widget-after-a-button-is-pressed-in-tkinter
https://www.tutorialspoint.com/tkinter-keypress-keyrelease-events

For list counter 
https://www.digitalocean.com/community/tutorials/python-counter-python-collections-counter

For Treeview functions 
https://www.tutorialspoint.com/delete-and-edit-items-in-tkinter-treeview 
https://www.tutorialspoint.com/how-to-clear-items-from-a-ttk-treeview-widget

'''
import tkinter as tk
from tkinter import ttk, messagebox
import csv
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from collections import Counter

class AnimeSearch:
    def __init__(self, parent, tracker):
        self.parent = parent
        self.tracker = tracker  # Reference to animetracker instance

        # Create entry for user input
        self.entry = tk.Entry(parent)
        self.entry.grid(row=1, column=1, padx=10, pady=10)

        # Create label for anime search
        self.anime_search()

        # Create listbox
        self.results_box = tk.Listbox(parent, width=50)
        self.results_box.grid(row=2, column=1, padx=10, pady=10)

        # Bind search function to <KeyRelease> event
        self.entry.bind("<KeyRelease>", self.anime_titles)

        # Bind click event to fill entry with selected title
        self.results_box.bind("<<ListboxSelect>>", self.anime_title_entry)

    def anime_search(self):
        # Create label for anime search
        search_label = tk.Label(self.parent, text="Enter Anime:")
        search_label.grid(row=1, column=0, padx=10, pady=5, sticky='e')

    def anime_titles(self, event=None):
        search_text = self.entry.get().lower()  #  convert to lowercase
        self.results_box.delete(0, tk.END)  # Clear previous results

        with open('anime-dataset-2023.csv', 'r', encoding='utf-8') as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:

                title = row[1]  
                if title.lower().startswith(search_text):  
                    self.results_box.insert(tk.END, title)

    def anime_title_entry(self, event=None):
        # select the right title from the results box
        selected_index = self.results_box.curselection()
        if selected_index:
            selected_title = self.results_box.get(selected_index)
            # Fill the entry with the selected title
            self.entry.delete(0, tk.END)
            self.entry.insert(tk.END, selected_title)

    def get_selected_title(self):
        return self.entry.get()

class AnimeTracker:
    def __init__(self, root):
        self.root = root
        self.root.title("Anime Tracker")
        self.anime_data = []  # List to store anime data
        self.categories = ["Completed", "Currently Watching", "Dropped", "On Hold", "Plan to Watch"]

        # Create notebook for tabbed interface
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(fill="both", expand=True)

        # Create tabs tracking lists, entry, genre, and ratings
        self.list_tab = ttk.Frame(self.notebook)
        self.detail_tab = ttk.Frame(self.notebook)
        self.genre_tracker_tab = ttk.Frame(self.notebook)  
        self.ratings_tracker_tab = ttk.Frame(self.notebook)  
        self.notebook.add(self.list_tab, text='List and History')
        self.notebook.add(self.detail_tab, text='Quick Add Entry')
        self.notebook.add(self.genre_tracker_tab, text='Genre Tracker')  
        self.notebook.add(self.ratings_tracker_tab, text='Ratings Tracker')  

        #FOR LIST HISTORY TABS DISPLAY

        # List and History tab widgets
        self.category_var = tk.StringVar()
        self.category_dropdown = ttk.Combobox(self.list_tab, textvariable=self.category_var, values=self.categories)
        self.category_dropdown.grid(row=0, column=0, padx=10, pady=10, sticky="ew")
        self.category_dropdown.current(0)

        # Create Treeview widget for displaying anime data
        self.treeview = ttk.Treeview(self.list_tab, columns=("Title", "Genre", "Score", "Length", "Notes", "Category"), show="headings")
        self.treeview.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

        # Add columns
        self.treeview.heading("Title", text="Title")
        self.treeview.heading("Genre", text="Genre")
        self.treeview.heading("Score", text="Score")
        self.treeview.heading("Length", text="Length")
        self.treeview.heading("Notes", text="Notes")
        self.treeview.heading("Category", text="Category")

        # Bind category dropdown to filter method
        self.category_dropdown.bind("<<ComboboxSelected>>", lambda event: self.sort_anime_data_by_category())

        # Add delete button
        self.delete_button = tk.Button(self.list_tab, text="Delete Selected", command=self.delete_selected_show)
        self.delete_button.grid(row=2, column=0, padx=10, pady=5, sticky="ew")

        # Add save button
        self.save_button = tk.Button(self.list_tab, text="Save Anime Data", command=self.save_anime_data)
        self.save_button.grid(row=3, column=0, padx=10, pady=5, sticky="ew")

        #FOR QUICK ADD SCREEN

        # Quick Add Entry tab widgets
        self.genre_dropdown()
        self.create_category_dropdown()
        self.score_dropdown()
        self.length_entry()
        self.note_text()

        # Add anime button
        self.add_button = tk.Button(self.detail_tab, text="Add Anime", command=self.add_anime)
        self.add_button.grid(row=8, column=1, padx=10, pady=10, sticky="ew")

        # Add anime search to the Quick Add Entry tab
        self.anime_search = AnimeSearch(self.detail_tab, self)

        # Genre Tracker tab widgets
        self.create_genre_tracker_widgets()

        # Ratings Tracker tab widgets
        self.create_ratings_tracker_widgets()

        # Load anime data
        self.load_anime_data()

        # Configure grid weights for List and History tab
        self.configure_grid_weights()

    def configure_grid_weights(self):
        # Configure row and column weights for List and History tab
        self.list_tab.grid_rowconfigure(1, weight=1)
        self.list_tab.grid_columnconfigure(0, weight=1)
        self.root.grid_rowconfigure(1, weight=1)
        self.root.grid_columnconfigure(0, weight=1)
        self.detail_tab.grid_rowconfigure(6, weight=1)
        self.detail_tab.grid_columnconfigure(1, weight=1)
        
    def genre_dropdown(self):
        # Quick Add Entry tab widgets
        genres = ["Action", "Adventure", "Comedy", "Drama", "Fantasy", "Horror", "Mystery", "Romance", "Sci-Fi", "Sport"]
        self.genre_var = tk.StringVar()
        self.genre_dropdown = ttk.Combobox(self.detail_tab, textvariable=self.genre_var, values=genres)
        self.genre_dropdown.grid(row=3, column=1, padx=10, pady=10, sticky="ew")
        self.genre_dropdown.current(0)

        genre_label = tk.Label(self.detail_tab, text="Genre:")
        genre_label.grid(row=3, column=0, padx=10, pady=5, sticky='e')

    def score_dropdown(self):
        # Create score dropdown
        self.score_var = tk.StringVar()
        self.score_dropdown = ttk.Combobox(self.detail_tab, textvariable=self.score_var, values=[str(i) for i in range(1, 11)])
        self.score_dropdown.grid(row=4, column=1, padx=10, pady=5, sticky="ew")
        self.score_dropdown.current(0)

        score_label = tk.Label(self.detail_tab, text="Score:")
        score_label.grid(row=4, column=0, padx=10, pady=5, sticky="e")

    def length_entry(self):
        # Create episode length entry
        self.length_entry = tk.Entry(self.detail_tab)
        self.length_entry.grid(row=5, column=1, padx=10, pady=5, sticky="ew")

        length_label = tk.Label(self.detail_tab, text="Episodes Watched:")
        length_label.grid(row=5, column=0, padx=10, pady=5, sticky="e")

    def note_text(self):
        # Create notes text entry
        self.note_text = tk.Text(self.detail_tab, width=40, height=10)
        self.note_text.grid(row=6, column=1, padx=10, pady=5, sticky="ew")

        note_label = tk.Label(self.detail_tab, text="Personal Notes:")
        note_label.grid(row=6, column=0, padx=10, pady=5, sticky="e")

    def create_category_dropdown(self):
        # Create category dropdown
        category_label = tk.Label(self.detail_tab, text="Category:")
        category_label.grid(row=7, column=0, padx=10, pady=5, sticky="e")

        self.category_dropdown_detail = ttk.Combobox(self.detail_tab, textvariable=self.category_var, values=self.categories)
        self.category_dropdown_detail.grid(row=7, column=1, padx=10, pady=5, sticky="ew")
        self.category_dropdown_detail.current(0)

    def add_anime(self):
        selected_title = self.anime_search.get_selected_title()
        genre = self.genre_var.get()
        score = self.score_var.get()
        length = self.length_entry.get()
        notes = self.note_text.get("1.0", "end-1c")
        category = self.category_var.get()

        # Make sure user enteres required info
        if not selected_title or not genre or not score or not category:
            messagebox.showerror("Error", "Please fill in all required fields (Title, Genre, Score, Category).")
            return

        # Check if the anime is already in the list
        if any(anime["Title"] == selected_title for anime in self.anime_data):
            messagebox.showerror("Error", "This anime is already added.")
            return

        # Add anime data to the list
        self.anime_data.append({"Title": selected_title, "Genre": genre, "Score": score, "Length": length, "Notes": notes, "Category": category})

        # treeview data 
        self.treeview.insert("", "end", values=(selected_title, genre, score, length, notes, category))

        # Update genre pie chart
        self.update_genre_tracker_pie_chart()

        # Update ratings bar graph
        self.update_ratings_tracker_bar_graph()

        messagebox.showinfo("Success", "Anime added successfully")

    def get_anime_genres(self):
        return [anime["Genre"] for anime in self.anime_data]

    def get_ratings_tracker(self):
        return [int(anime["Score"]) for anime in self.anime_data]

    def create_genre_tracker_widgets(self):
        # Genre Tracker tab widgets
        genre_label = tk.Label(self.genre_tracker_tab, text="Genre Tracker")
        genre_label.pack()

        # Create the pie chart
        self.pie_chart = PieChart(self.genre_tracker_tab)

        # Add a button to update the pie chart
        update_button = tk.Button(self.genre_tracker_tab, text="Update Chart", command=self.update_genre_tracker_pie_chart)
        update_button.pack()

    def create_ratings_tracker_widgets(self):
        rating_label = tk.Label(self.ratings_tracker_tab, text="Ratings Tracker Bar Graph")
        rating_label.pack()

        self.bar_graph = BarGraph(self.ratings_tracker_tab)

        update_button = tk.Button(self.ratings_tracker_tab, text="Update Graph", command=self.update_ratings_tracker_bar_graph)
        update_button.pack()

    def update_genre_tracker_pie_chart(self):
        # Update the pie chart
        genres = self.get_anime_genres()
        self.pie_chart.update(genres)

    def update_ratings_tracker_bar_graph(self):
        # Update the bar graph
        ratings = self.get_ratings_tracker()
        self.bar_graph.update(ratings)

    def save_anime_data(self):
        # Save anime data to a CSV file
        with open('anime_data.csv', 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ["Title", "Genre", "Score", "Length", "Notes", "Category"]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

            writer.writeheader()
            for anime in self.anime_data:
                writer.writerow(anime)

    def load_anime_data(self):
        try:
            with open('anime_data.csv', 'r', encoding='utf-8') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    self.anime_data.append(row)
                    self.treeview.insert("", "end", values=(row['Title'], row['Genre'], row['Score'], row['Length'], row['Notes'], row['Category']))
        except FileNotFoundError:
            pass

        # Sort anime data by category after loading
        self.sort_anime_data_by_category()

    def sort_anime_data_by_category(self):
        # Clear existing items in the Treeview
        self.treeview.delete(*self.treeview.get_children())

        # Get the selected category from the dropdown in the Quick Add Entry tab
        selected_category = self.category_var.get()

        # Filter anime data based category
        filtered_anime_data = [anime for anime in self.anime_data if anime['Category'] == selected_category]

        # Insert filtered data 
        for anime in filtered_anime_data:
            self.treeview.insert("", "end", values=(anime["Title"], anime["Genre"], anime["Score"], anime["Length"], anime["Notes"], anime["Category"]))

    def delete_selected_show(self):
        # Get the ID of the selected item in the treeview
        selected_item = self.treeview.selection()[0]
        # Remove the selected item f
        self.treeview.delete(selected_item)
        # Removeitem from the anime_data list
        for anime in self.anime_data:
            if anime['Title'] == self.treeview.item(selected_item)['values'][0]:
                self.anime_data.remove(anime)
                break
        # Update genre tracker 
        self.update_genre_tracker_pie_chart()

class PieChart:
    def __init__(self, parent):
        self.parent = parent
        self.fig, self.ax = plt.subplots()
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.parent)
        self.canvas.get_tk_widget().pack()

    def update(self, genres):
        self.ax.clear()
        genre_counts = Counter(genres)
        self.ax.pie(genre_counts.values(), labels=genre_counts.keys(), autopct='%1.1f%%', startangle=140)
        self.ax.axis('equal')
        self.canvas.draw()

class BarGraph:
    def __init__(self, parent):
        self.parent = parent
        self.fig, self.ax = plt.subplots()
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.parent)
        self.canvas.get_tk_widget().pack()

    def update(self, ratings):
        self.ax.clear()

        self.ax.hist(ratings, bins=range(1, 11), edgecolor='black', align='left')
        self.ax.set_xlabel('Rating')
        self.ax.set_ylabel('Frequency')
        self.ax.set_title('Rating Tracker')
        self.ax.set_xticks(range(1, 11))
        self.canvas.draw()

if __name__ == "__main__":
    root = tk.Tk()
    app = AnimeTracker(root)
    root.mainloop()
